name: Lint

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest

    env:
      # Hide the graphical elements from pipenv's output
      POETRY_VIRTUALENVS_CREATE: false
      PIPENV_HIDE_EMOJIS: 1
      PIPENV_NOSPIN: 1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache Poetry cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pypoetry
          key: "poetry-cache-${{ runner.os }}-\
          ${{ env.PYTHON_VERSION }}-${{ env.POETRY_VERSION }}"

      - name: Cache Pre-commit cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pre-commit
          key: "pre-commit-cache-${{ runner.os }}-${{ env.PYTHON_VERSION }}-\
          ${{ env.PRECOMMIT_VERSION }}-\
          ${{ hashFiles('**/.pre-commit-config.yaml') }}"

      # virtualenv cache should depends on OS, Python version and `poetry.lock` (and optionally workflow files).
      - name: Cache Packages
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: "poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-\
          ${{ hashFiles('**/poetry.lock') }}-\
          ${{ hashFiles('.github/workflows/*.yaml') }}"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies using poetry
        run: |
          pip install poetry
          poetry install --only dev

      # We will not run `flake8` here, as we will use a separate flake8
      # action. As pre-commit does not support user installs, we set
      # PIP_USER=0 to not do a user install.
      - name: Run pre-commit hooks
        run: export PIP_USER=0; SKIP=flake8 pre-commit run --all-files

      # Run flake8 and have it format the linting errors in the format of
      # the GitHub Workflow command to register error annotations. This
      # means that our flake8 output is automatically added as an error
      # annotation to both the run result and in the "Files" tab of a
      # pull request.
      #
      # Format used:
      # ::error file={filename},line={line},col={col}::{message}
      - name: Run flake8
        run: "flake8 \
        --format='::error file=%(path)s,line=%(row)d,col=%(col)d::\
        [flake8] %(code)s: %(text)s'"
